#+TITLE: Dostawy jedzenia --- ,,klon'' Uber Eats/Pyszne.pl
#+SUBTITLE: Projekt aplikacje bazodanowe
#+AUTHOR: Patryk Gronkiewicz 164157, Piotr Krawiec 164165, Adrian Szmyd 163914
#+LANGUAGE: pl
#+LATEX_HEADER: \usepackage{float}

* Temat projektu
Celem projektu było stworzenie aplikacji wykorzystującej język PL/PgSQL oraz stworzenie do niej prostego interfejsu z pomocą HTML, CSS i JavaScript.

Stworzona przez nas aplikacja ma służyć do zamawiania jedzenia. Aplikacja na składa się z kilku widoków: restauracje, dostawcy i klienci. Dla każdego z tych widoków stworzyliśmy akcje, które można z ich poziomu wykonywać. Każda z restauracji może sprawdzić z ilu dań składa się dane zamówienie, jeżeli je dokończy to może oznaczyć je jako zakończone. Pracownicy mają możliwość odebrania i dostarczenia zamówienia, a także sprawdzenia przychodu. Klienci natomiast mają dostęp do listy dań, a także możliwość ich zamówienia.

* Baza danych
W projekcie wykorzystano bazę PostgreSQL ze względu na możliwość łatwej jej konteneryzacji, co pozwoliło nam pracować niezależnie od systemu operacyjnego hosta. Wykorzystaliśmy gotowy schemat bazy z poprzedniego projektu.

[[./img/relacje.png]]

Schemat ten został wyeksportowany z pomocą programu SQLPlus, następnie umieściliśmy go w bazie. Podobnie zrobiliśmy z danymi, wyeksportowaliśmy je do pliku CSV i umieściliśmy w bazie.

** Restauracje
*** Procedury
1. Procedura RESTAURANT MAKE ORDER READY
    Mając już listę zamówień, które należy dokończyć restauracja może wybrać zamówienie i oznaczyć je jako gotowe do odbioru. Pojawi się wtedy w widoku dostawców i dostawca będzie mógł je wybrać i odebrać.

2. Procedura RESTAURANTS CREATE RESTAURANT IF NOT EXISTS
    Jest to najbardzej zaawansowana procedura. Na wejściu przyjmuje informacje o restauracji oraz dania w formie zagnieżdzonej listy. Na podstawie tych danych utworzona zostanie nowa restauracja wraz z jej daniami.
    #+NAME: Przykład iteracji po type ARRAY
    #+BEGIN_SRC sql
    FOREACH dish_ SLICE 1 IN ARRAY dishes_ LOOP
            SELECT MAX(id)+1 INTO dish_id FROM dishes;
            INSERT INTO dishes
                       (id, name, price, waittime, restaurantid)
                VALUES (dish_id, dish_[1], CAST(dish_[2] AS int),
                        CAST(dish_[3] AS int), restaurant_id);
    END LOOP;
    #+END_SRC
    W procedurze tej do wygenerowania id używamy MAX, ponieważ w MS Access dane można było wpisywać ręcznie i sprawiło to, że jeżeli wygenerujemy nowe id z pomocą sekwencji możemy otrzymać konflikt. Jest to jednak mało wydajne i należałoby to w przyszłości zmienić.
3. Procedura RESTAURANTS ADD CUISNE TO RESTAURANT
    Każda restauracja może określić jakie rodzaje dań sprzedaje. Prodecura ta pozwala dodawać nowe rodzaje kuchni do restauracji.

*** Funkcje
1. Funkcja RESTAURANT LIST ORDERS
    Funkcja ta ma pomóc nam, wypisując informacje o tym jakie zamówienia są dostępne. Zwraca ona id zamówienia, nazwę dania oraz ile sztuk należy przygotować. Przy czym wyświetla ona wyłącznie zamówienia dla podanej restauracji, które nie zostały jeszcze dostarczone oraz nie zostały oznaczone jako gotowe do odbioru
2. Funkcja RESTAURANT INFO
    Funkcja ta ma na celu ułatwienie zebrania wszystkch potrzebnych informacji o danej restauracji, takich jak: adres, kontakt itp. Zwraca je ona dla podenego id restauracji.

** Klienci
*** Procedury
1. Procedura CLIENTS CHANGE ADDRESS
    Umożliwia zmianę adresu na wypadek błędu lub zmienienia miejsca zamieszkania przez klienta. Wykorzystuje funkcję pomocniczą: CREATE ADDRESS IF NOT EXISTS
2. Procedura CLIENTS CHANGE CONTACTINFO
    Umożliwia zmianę informacji kontaktowych na wypadek błędu lub ich zmiany przez klienta, wykorzystuje funkcję pomocniczą: CREATE CONTACTINFO IF NOT EXISTS.
3. Procedura CLIENTS CHANGE NAME
    Umożliwia zmianę imienia i nazwiska w wypadku błędu lub ich zmiany przez klienta. Pokazuje średni koszt zamówienia dla danego typu płatności, w ramach ciekawostki
*** Funkcje
1. Funkcja CREATE CLIENT IF NOT EXISTS
    Umożliwia utworzenie klienta jeśli ten nie istnieje. Zwraca id utworzonego klienta. Wykorzystuje funkcje pomocnicze: CREATE CONTACTINFO IF NOT EXISTS oraz CREATE ADRESS IF NOT EXISTS.
2. Funkcja CLIENTS LIST ORDERS
** Pracownicy
*** Procedury
1. ~deliver_order~

   Po wykonaniu tej procedury zamówienie zostaje oznaczone jako dostarczone do klienta. W naszej implementacji jest to oznaczane przez wprowadzenie daty zakończenia zamówienia.
2. ~batch_deliver~
   Jest to najciekawsza procedura w tym module - pozwala na jednoczesne dostarczenie wielu zamówień.
   #+begin_src sql
    CREATE OR REPLACE PROCEDURE batch_deliver(order_ids int[])
        LANGUAGE 'plpgsql'
    AS $BODY$
    DECLARE
        order_id int;
    BEGIN
        FOREACH order_id in array order_ids LOOP
            CALL deliver_order(order_id);
        END LOOP;

    END;
    $BODY$;
   #+end_src
   Została w niej wykorzystana wcześniej wspomniana procedura ~deliver_order~. W naszym przypadku pozwala ona na zaznaczenie wielu zamówień w formularzu i dostarczeniu ich jednocześnie.
3. ~take_order_from_restaurant~
   Procedura ta pozwala na odebranie zamówienia z restauracji przez pracownika. Zostaje on wtedy przypisany do danego zamówienia przez jego ID. Wybór danego zamówienia jest możliwy na podstawie miasta, co zostało zrealizowane we frontendzie.
*** Funkcje
1. ~employees_list_undelivered_order~
   Funkcja ta listuje niedostarczone jeszcze przez pracownika zamówienia. Sprawdza ona czy jest przypisana data zakończenia zamówienia oraz filtruje zamówienia tylko do tych, które należą do danego pracownika.
2. ~employees_get_available_orders_to_take~
   Funkcja ta wypisuje możliwe do odebrania aktualnie zamówienia. Możemy sprawdzić zamówienia dostępne w danym mieście, dzięki czemu będąc w np. Rzeszowie nie dostaniemy ofert z Gdańska czy Torunia.
3. ~employees_get_profit~
   Funkcja ta oblicza przychód jaki osiągnął dany pracownik w zadanym okresie. W tym przypadku została przyjęta prowizja na poziomie 5% od każdego złożonego zamówienia, co jednak możnaby było sparametryzować później.
** Funkcje i procedury pomocnicze
Część funkcji i procedur może być używana w wielu widokach, gdyż np. dodają one miasto lub nowy adres. A adresy restauracji, klientów i dostawców przechowywane są w tej samej tabeli, więc każdy z tych widoków może dodawać adres korzystając z tej samej funkcji.
1. Funkcja CREATE CITY IF NOT EXISTS
    Dodaje miasto jeżeli nie istnieje w tabeli. Jeżeli miasto już istnieje to zwracany jest jego id.
2. Funkcja CREATE CONTACT INFO IF NOT EXISTS
    Podobnie do poprzedniej funkcji, dodajemy informacje kontaktowe do tablicy o ile ich tam nie ma i zwracamy id. Jeżeli dane istnieją to zwracamy ich id.
3. Funkcja CREATE ADDRESS IF NOT EXISTS
    Tworzy ona adres w tabeli o ile go tam nie ma i zwraca jego id.
4. Funkcja CLIENTS AVAILABLE RESTAURANTS
    wypisuje restauracje dostępne w mieście klienta
5. CLIENTS AVAILABLE DISHES
    Wypisuje dostępne dania dla danego klienta (według miasta, wykorzystuje funkcję CLIENTS AVAILABLE RESTAURANTS.
6. CLIENTS NEW ORDER
    Utworzenie nowego zamówienia przez klienta.
7. PAYMENT TYPE AVG ORDER COST
    Pokazuje średni koszt zamówienia dla danego typu płatności, w ramach ciekawostki.
* Frontend
Do stworzenia strony wykorzystaliśmy HTML i CSS (Bootstrap5). Strony te serwowane są z pomocą Flaska (Python). Przygotowaliśmy szablony stron, w pythonie wysyłamy zapytania do bazy. Następnie te szablony uzupełniane są o dane pochodzące z bazy.
** Restauracje
Z poziomu restauracji dostępne są opcje wyświetlania listy retauracji oraz dodawania restauracji. Z poziomu listy restauracji można przejść do listy zamówień dowolnej restauracji. W liście tej mamy informacje o numerze zamówienia, jakie dania znajdują się w zamówieniu oraz w jakiej ilości.

#+CAPTION: Widok listy restauracji
#+attr_latex: :width 300px :placement [H]
[[./img/restaurants-list.png]]

Widok ten generowany jest przez:

#+attr_latex: :width 300px :placement [H]
[[./img/restaurant-list.png]]

Z szablonu:
#+attr_latex: :width 300px :placement [H]
[[./img/restaurants-table.png]]


#+CAPTION: Widok dodawania restauracji
#+attr_latex: :width 300px :placement [H]
[[./img/restaurants-add.png]]

Ważne jest aby w każdym polu formularza dotyczących danego dania wpisać dane. W przeciwnym przypadu otrzymamy błąd formularza. Dane z tego formularza wysyłane są do:

#+attr_latex: :width 300px :placement [H]
[[./img/restaurants-add-query.png]]

W przypadku błędu, formularz zwróci odpowiedni komunikat:

#+CAPTION: Błąd formularza
#+attr_latex: :width 300px :placement [H]
[[./img/restaurants-error.png]]

#+CAPTION: Widok listy zamówień w restauracji
#+attr_latex: :width 300px :placement [H]
[[./img/restaurants-orders.png]]

Po kliknięciu na przycisk oznacz jako do odebrania, uruchomiona zostaje procedura kończąca zamówienia.
#+attr_latex: :width 300px :placement [H]
[[./img/restaurant-orders-ready.png]]

Widoczne po prawej stronie informacje o restauracji pozyskiwane są z pomocą funkcji:
#+attr_latex: :width 300px :placement [H]
[[./img/restaurant-orders-info.png]]

Natomiast lista zamówień generowana jest z użyciem:
#+attr_latex: :width 300px :placement [H]
[[./img/restaurant-orders-list.png]]

Te dane przekazywane są do szablonu strony z pomocą:
#+attr_latex: :width 300px :placement [H]
[[./img/restaurant-render.png]]

Sam szablon ma następującą postać:
#+attr_latex: :width 300px :placement [H]
[[./img/restaurants-template.png]]



** Klienci
Z poziomu klientów dostępne są opcje wyświetlenia listy klientów, dodanie nowego klienta, sprawdzenie dostępnych restauracji, sprawdzenie dostępnych dań oraz złożenie zamówienia.
#+CAPTION: Lista klientów
#+attr_latex: :width 300px :placement [H]
[[./img/clients_1.png]]

#+CAPTION: Dodawanie klients
#+attr_latex: :width 300px :placement [H]
[[./img/clients_2.png]]

#+CAPTION: Restauracje dostępne dla klienta
#+attr_latex: :width 300px :placement [H]
[[./img/clients_3.png]]

Np. po kliknięciu przycisku Restauracje dla klienta o ID = 7 otrzymujemy następującą stronę:
#+CAPTION: Lista dostępnych restauracji
#+attr_latex: :width 300px :placement [H]
[[./img/clients_4.png]]
Analogicznie dla dostępnych dań:
#+CAPTION: Lista klientów - dostępne dania
#+attr_latex: :width 300px :placement [H]
[[./img/clients_5.png]]

#+CAPTION: Dania dostępne dla klients
#+attr_latex: :width 300px :placement [H]
[[./img/clients_6.png]]

#+CAPTION: Lista klientów - składanie zamówienia
#+attr_latex: :width 300px :placement [H]
[[./img/clients_7.png]]

#+CAPTION: Składanie zamówienia:
#+attr_latex: :width 300px :placement [H]
[[./img/clients_8.png]]

Strona „Klienci” jaki i wszystkie inne składa się z paska nawigacji (z identycznymi opcjami dla każdej ze stron), zawierającego przyciski przekierowujące do innych podstron: „Lista klientów”, „Dodawanie klienta, „Dostępne restauracje”, „Dostępne dania”, „Złóż zamówienie” oraz stopki. Ponadto w zależności od strony znajduje się na niej formularz lub tabela z wyborem klienta (rozwiązuje to problem z brakiem możliwości rejestracji/logowania, ponieważ klient może wybrać sam siebie i np. złożyć w ten sposób zamówienie).

Kod paska nawigacji w pliku clients-navbar.html:

[[./img/dokclients_1.png]]
[[./img/dokclients_2.png]]

Kod stopki w pliku clients-footer.html:

[[./img/dokclients_3.png]]

Kod strony głównej „Lista klientów” w pliku clients.html:

[[./img/dokclients_5.png]]

Kod pliku clients-table.html odpowiadającego za pokazywanie tabeli z klientami:

[[./img/dokclients_4.png]]


Kod strony głównej „Lista klientów” w pliku Flask app.py:

[[./img/dokclients_6.png]]

Widok strony:

[[./img/dokclients_7.png]]

Jak widzimy Flask pobiera dane z bazy danych poprzez instrukcji SQL i wyświetla je dzięki plikowi html.

Strona „Dodawanie klienta” wykorzystuje formularz, do którego wpisywane są dane klienta, odpowiadające argumentom funkcji CREATE_CLIENT_IF_NOT_EXISTS oraz przycisk „Submit”, którym zatwierdzamy dodanie nowego klienta. 

[[./img/dokclients_8.png]]

Kod pliku clients-create.html:

[[./img/dokclients_9.png]]
[[./img/dokclients_10.png]]


Plik Flask app.py dotyczący dodawania klienta:

[[./img/dokclients_11.png]]

Kod wykorzystanego zapytania SQL:

[[./img/dokclients_12.png]]

Strona „Dostępne restauracje” także wykorzystuje tabelę klientów, tym razem z dodatkowym przyciskiem który przekierowuje nas na stronę z listą dostępnych restauracji dla klienta o danym ID. ID klienta, który został wybrany, jest przechowane przez co może ono zostać wykorzystane przez funkcję CLIENTS_AVAILABLE_RESTAURANTS do wyświetlenia listy. 

[[./img/dokclients_13.png]]

Naciskając przycisk „Dostępne restauracje” zostajemy przekierowani na stronę /available-restaurants o kodzie w pliku clients_available_restaurants.html:

[[./img/dokclients_14.png]]

Oraz o kodzie w pliku Flask app.py:

[[./img/dokclients_15.png]]

Po naciśnięciu przycisku “Restauracje” przy danym kliencie, zostajemy przekierowani na stronę /available-restaurants-info wyświetlona nam strona z listą restauracji w mieście, z którego jest klient. 

[[./img/dokclients_16.png]]

Kod html wyświetlonej strony z pliku availalbe-restaurants-info.html: 

[[./img/dokclients_17.png]]

Kod strony w pliku Flask app.py:

[[./img/dokclients_18.png]]

Kod funkcji SQL CLIENTS_AVAILABLE_RESTAURANTS

[[./img/dokclients_19.png]]

Analogicznie jak dla przycisku “Dostępne restauracje” bardzo podobny kod tyczy się przycisku „Dostępne dania”. Także zostaje wyświetlona tabela z informacjami dot. klientów, wraz z przyciskiem „Dania”. Po jego wciśnięciu zostajemy przekierowani na stronę z daniami dostępnymi dla wybranego przez nas klienta.

[[./img/dokclients_20.png]]

Kod strony /available-dishes w pliku html clients_available_dishes.html:

[[./img/dokclients_21.png]]

Kod strony w pliku Flask app.py:

[[./img/dokclients_22.png]]

Wyświetlana strona po wciśnięciu przycisku „Dania”:

[[./img/dokclients_23.png]]

Kod strony /available-dishes-info, do której zostajemy przekierowani po wciśnięciu przycisku „Dania”, w pliku html: 

[[./img/dokclients_24.png]]

Kod strony w pliku Flask app.py:

[[./img/dokclients_25.png]]

Kod SQL wykorzystanej funkcji CLIENTS_AVAILABLE_DISHES:

[[./img/dokclients_26.png]]

Strona „Składania zamówienia” także wykorzystuje tabelę klientów, tym razem z dodatkowym przyciskiem który przekierowuje nas na stronę składania zamówienia. ID klienta, który został wybrany, jest przechowane przez co pomimo tego że nie mamy do wyboru ID klienta na stronie, może ono zostać wykorzystane przez funkcję CREATE_CLIENT_IF_NOT_EXISTS.

[[./img/dokclients_27.png]]

Kod strony /make-order-clients w html: make-order-clients.html

[[./img/dokclients_28.png]]

Kod strony w pliku Flask app.py:

[[./img/dokclients_29.png]]

Po wybraniu klienta jesteśmy przekierowani na stronę /make-order związaną ze składaniem zamówienia, na której wpisujemy ID dania, które chcemy zamówić wraz z jego ilością oraz typem płatności.

[[./img/dokclients_30.png]]

Kod strony w pliku html: client_new_order.html

[[./img/dokclients_31.png]]

Kod strony w pliku Flask app.py:

[[./img/dokclients_32.png]]

Kod funkcji SQL CLIENTS_NEW_ORDER: 

[[./img/dokclients_33.png]]

** Pracownicy
W naszej aplikacji mamy dostępną listę pracowników. Zastępuje ona system logowania w celu uproszczenia części niepowiązanej z tematyką projektu. Możemy tam znaleźć istotne informacje nt. pracowników oraz przejście do ,,panelu sterowania''.

#+caption: Lista pracowników
#+attr_latex: :width 300px :float nil
[[file:img/employees-list.png]]

W panelu sterowania znajdują się 3 możliwe opcje, z czego 2 możliwe do konfiguracji.

#+caption: ,,Panel sterowania'' pracownika
#+attr_latex: :width 300px :float nil
[[file:img/employees-dashboard.png]]

1. Lista dostępnych zamówień - po wybraniu z wczytywanej z bazy danych listy miast odpowiedniej lokalizacji możemy przejść do listy dostępnych zamówień.
    #+caption: Lista dostępnych zamówień
    #+attr_latex: :width 300px :float nil
    [[file:img/employees-available_orders.png]]

2. Zarobki - po wybraniu z wygodnego menu możemy prosto wyznaczyć przychód z danego okresu
    #+caption: Zysk pracownika w danym okresie
    #+attr_latex: :width 300px :float nil
    [[file:img/employees-profits.png]]

3. Lista niedostarczonych zamówień - tutaj każdy pracownik może sprawdzić które zamówienia dostarczył, a których jeszcze nie. Dodatkową opcją jest oznaczenie danego zamówienia jako dostarczonego albo całej grupy zamówień.
    #+caption: Lista niedostarczonych zamówień
    #+attr_latex: :width 300px :float nil
    [[file:img/employees-to_deliver.png]]

#+caption: Listowanie dostępnych zamówień w mieście
#+attr_latex: :width 300px :float nil
[[./img/emp_avail.png]]
#+caption: Dostarczanie pojedynczego zamówienia
#+attr_latex: :width 300px :float nil
[[./img/emp_deliver.png]]
#+caption: Dostarczenie wielu zamówień jednocześnie
#+attr_latex: :width 300px :float nil
[[./img/emp_deliver_batch.png]]
#+caption: Wejście do dashboardu pracownika
#+attr_latex: :width 300px :float nil
[[./img/emp_manage.png]]
#+caption: Obliczanie zysku pracownika
#+attr_latex: :width 300px :float nil
[[./img/emp_profit.png]]
#+caption: Przyjmowanie pojedynczego zamówienia przez pracownika
#+attr_latex: :width 300px :float nil
[[./img/emp_take.png]]
#+caption: Przyjmowanie wielu zamówień przez pracownika
#+attr_latex: :width 300px :float nil
[[./img/emp_undelivered.png]]

* Uruchamianie projektu
Do uruchomienia projektu potrzebne są: Docker, Docker compose, git oraz python. Uruchamianie należy zacząć od uruchomienia bazy danych oraz pgAdmin do zarządzania nią. Poniższe polecenie uruchomi bazę, stworzy odpowiednie tabele, procedury, funkcje oraz umieści w nich przykładowe dane. Kod generujący je znajduje się w folderze ~Docker~ i uruchamia się w kolejności alfabetycznej, stąd nazwy plików mają format ~init-number-nazwa~.
#+BEGIN_SRC bash
$ git clone git@github.com:finloop/aplikacje-bazodanowe.git
$ cd aplikacje-bazodanowe
$ docker compose up -d
#+END_SRC
Jeżeli baza już działa, możemy uruchomić serwer www:
#+BEGIN_SRC bash
$ pip install -r requirements.txt
$ flask run
#+END_SRC
Aby przejść do poszczególnych widoków należy wpisać:
1. Klienci: [[http://localhost:5000/clients]]
2. Restauracje: [[http://localhost:5000/restaurants]]
3. Dostawcy: [[http://localhost:5000/employees]]

* Podsumowanie i plany rozwoju
W projekcie udało nam się stworzyć podstawową aplikację korzystającą z bazy Postgres oraz wykorzystującą PL/pgSQL. Demonstruje ona w jaki sposób mogłaby działać aplikacja do zamawiania jedzenia. Oczywiście jest to wyłącznie prototyp i właściwa aplikacja wymagałaby stworzenia systemu logowania, profili oraz ulepszonego UI.
